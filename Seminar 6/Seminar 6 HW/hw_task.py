# Добавьте в пакет, созданный на семинаре шахматный модуль.
# Внутри него напишите код, решающий задачу о 8 ферзях.
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга.
# Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей.
# Если ферзи не бьют друг друга верните истину, а если бьют - ложь.
from statistics import mean

# Напишите функцию в шахматный модуль.
# Используйте генератор случайных чисел для случайной расстановки ферзей в задаче выше.
# Проверяйте различные случайные варианты и выведите 4 успешных расстановки.
# *Выведите все успешные варианты расстановок
from hw_task_module import queen_task
import time

# a6, b3, c1, d8, e5, f2, g4, h7
# pos = [(0, 5), (1, 2), (2, 0), (3, 7), (4, 4), (5, 1), (6, 3), (7, 6)]
# print(queen_task.check_queen_positions(pos))

# 229 сек ушло на поиск одного рандомного варианта, на большее количество время не тратил)
# Второй прогон 482с на один удачный, точно не буду 4 гонять
# Третий прогон 1622с
# res = []
# start_time = time.time()
# while len(res) < 1:
#     attempt = queen_task.check_queen_positions(queen_task.generate_random_positions())
#     if attempt and attempt not in res:
#         res.append(tuple(attempt))
# print("--- %s seconds ---" % (time.time() - start_time))
# print(*res, sep='\n')

# 0.86с первый вариант, можно посмотреть в предыдущем коммите.
# 0.19с новый вариант =)
start_time = time.time()
for i, res in enumerate(queen_task.generate_all(), start=1):
    print(f"{i}: {res}")
print("--- %s seconds ---" % (time.time() - start_time))
